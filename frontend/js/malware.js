import { v4 as uuidv4 } from 'https://cdn.skypack.dev/uuid';
import axios from 'https://cdn.skypack.dev/axios';

// Constants and helper functions
const API_BASE_URL = "http://localhost:5000/api/malware";  // Replace with your actual base URL

const handleApiRequest = async (endpoint, method = "GET", data = null) => {
  try {
    const response = await axios({
      url: `${API_BASE_URL}${endpoint}`,
      method,
      data,
      headers: {
        "Content-Type": "application/json",
      },
    });
    return response.data;
  } catch (error) {
    console.error("API Request Error:", error);
    throw new Error(error.response?.data?.error || "An error occurred");
  }
};

export const uploadMalware = async (file, sampleId = null) => {
  const formData = new FormData();
  formData.append("file", file);

  const newSampleId = sampleId || uuidv4();

  const malwareMetadata = {
    sample_id: newSampleId,
    filename: file.name,
    file_path: `/uploads/${file.name}`,
    os_version: 'Linux',
    architecture: 'x64',
    country_origin: 'US',
    collection_method: 'manual',
    threat_actor: 'Unknown',
    detection_status: 'not_detected',
    timestamp: new Date().toISOString(),
  };

  const payload = { malware_metadata: malwareMetadata };
  formData.append('data', JSON.stringify(payload));

  try {
    const result = await axios.post(`${API_BASE_URL}/upload`, formData, {
      headers: {
        "Content-Type": "multipart/form-data",
      },
    });
    return result.data;
  } catch (error) {
    console.error("Upload Error:", error);
    throw new Error(error.response?.data?.error || "Error uploading malware");
  }
};

export const staticAnalysis = async (filename, sampleId) => {
  const data = {
    sample_id: sampleId,
    filename: filename,
    processed: true,
    blockchain_verified: false
  };
  return handleApiRequest("/static_analysis", "POST", data);
};

export const dynamicAnalysis = async (filename, sampleId) => {
  return handleApiRequest("/dynamic_analysis", "POST", { filename, sample_id: sampleId });
};

export const hybridAnalysis = async (filename, sampleId) => {
  return handleApiRequest("/hybrid_analysis", "POST", { filename, sample_id: sampleId });
};

const downloadReport = (analysisResult, reportType) => {
  const blob = new Blob([JSON.stringify(analysisResult, null, 2)], { type: 'application/json' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `${reportType}_analysis_report.json`;
  link.click();
};

window.addEventListener('DOMContentLoaded', () => {
  const fileInput = document.querySelector('#fileInput');
  const sampleIdInput = document.querySelector('#sampleIdInput');
  const uploadForm = document.querySelector('#upload-form');
  const output = document.getElementById('upload-result');
  const staticBtn = document.querySelector('#static-analysis-btn');
  const dynamicBtn = document.querySelector('#dynamic-analysis-btn');
  const hybridBtn = document.querySelector('#hybrid-analysis-btn');
  const filenameInput = document.querySelector('#filenameInput');
  const resultBox = document.querySelector('#results-container');

  if (!fileInput || !sampleIdInput || !uploadForm || !output || !staticBtn || !dynamicBtn || !hybridBtn || !filenameInput || !resultBox) {
    console.error('One or more DOM elements not found.');
    return;
  }

  staticBtn.disabled = true;
  dynamicBtn.disabled = true;
  hybridBtn.disabled = true;

  uploadForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    const file = fileInput.files[0];
    const sampleId = sampleIdInput.value || uuidv4();

    if (!file) {
      alert("Please select a file to upload.");
      return;
    }

    output.textContent = "Uploading file... Please wait.";

    try {
      const uploadResponse = await uploadMalware(file, sampleId);
      console.log("Malware uploaded:", uploadResponse);

      output.textContent = `Malware uploaded successfully: ${uploadResponse.filename}`;
      alert("Malware uploaded successfully!");

      // Save for later analysis use
      window.uploadedSampleId = uploadResponse.sample_id;
      window.uploadedFilename = uploadResponse.filename;

      // Enable buttons
      staticBtn.disabled = false;
      dynamicBtn.disabled = false;
      hybridBtn.disabled = false;

    } catch (error) {
      console.error("Upload Error:", error);
      output.textContent = "An error occurred during file upload.";
      alert("File upload failed.");
    }
  });

  const getSampleId = () => window.uploadedSampleId || sampleIdInput.value.trim();
  const getFilename = () => window.uploadedFilename || filenameInput.value.trim();

  staticBtn.addEventListener('click', async () => {
    const sampleId = getSampleId();
    const filename = getFilename();
    if (!sampleId || !filename) return alert("Please upload a file first.");

    resultBox.innerHTML = "üß™ Running static analysis...";
    try {
      const result = await staticAnalysis(filename, sampleId);
      resultBox.innerHTML = `<pre>${JSON.stringify(result, null, 2)}</pre>`;

      // Add download button
      resultBox.innerHTML += `<button id="download-static-btn">Download Static Analysis Report</button>`;
      document.querySelector('#download-static-btn').addEventListener('click', () => downloadReport(result, 'static'));

    } catch (error) {
      resultBox.innerHTML = "‚ùå Static Analysis Failed.";
      console.error(error);
    }
  });

  dynamicBtn.addEventListener('click', async () => {
    const sampleId = getSampleId();
    const filename = getFilename();
    if (!sampleId || !filename) return alert("Please upload a file first.");

    resultBox.innerHTML = "üåÄ Running dynamic analysis...";
    try {
      const result = await dynamicAnalysis(filename, sampleId);
      resultBox.innerHTML = `<pre>${JSON.stringify(result, null, 2)}</pre>`;

      // Add download button
      resultBox.innerHTML += `<button id="download-dynamic-btn">Download Dynamic Analysis Report</button>`;
      document.querySelector('#download-dynamic-btn').addEventListener('click', () => downloadReport(result, 'dynamic'));

    } catch (error) {
      resultBox.innerHTML = "‚ùå Dynamic Analysis Failed.";
      console.error(error);
    }
  });

  hybridBtn.addEventListener('click', async () => {
    const sampleId = getSampleId();
    const filename = getFilename();
    if (!sampleId || !filename) return alert("Please upload a file first.");

    resultBox.innerHTML = "üî¨ Running hybrid analysis...";
    try {
      const result = await hybridAnalysis(filename, sampleId);
      resultBox.innerHTML = `<pre>${JSON.stringify(result, null, 2)}</pre>`;

      // Add download button
      resultBox.innerHTML += `<button id="download-hybrid-btn">Download Hybrid Analysis Report</button>`;
      document.querySelector('#download-hybrid-btn').addEventListener('click', () => downloadReport(result, 'hybrid'));

    } catch (error) {
      resultBox.innerHTML = "‚ùå Hybrid Analysis Failed.";
      console.error(error);
    }
  });
});

